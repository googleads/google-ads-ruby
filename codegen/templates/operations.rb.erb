module Google
  module Ads
    module GoogleAds
      module Factories
        module Operations
          <% operations.each do |operation| %>
          def self.<%= operation.operation.name.split("::").last.underscore %>
            require "<%= operation.path.split("google-ads-ruby/lib/").last %>"
            <%= operation.operation.name %>.new
          end
          <% end %>
          def self.create_resource
            CreateResource
          end

          def self.update_resource
            UpdateResource
          end

          module CreateResource
            <% operations.reject { |x| x.create_class.nil? }.each do |operation| %>
            def self.<%= operation.operation.name.split("::").last.underscore.gsub("_operation", "") %>(res=nil, &blk)
              require "<%= operation.path.split("google-ads-ruby/lib/").last %>"
              op = <%= operation.operation.name %>.new
              if res != nil
                op["create"] = res
              elsif !blk.nil?
                op["create"] = Factories::Resources.<%= operation.create_class.name.split("::").last.underscore %>(&blk)
              end

              op
            end
            <% end %>
          end

          module UpdateResource
            <% operations.reject { |x| x.create_class.nil? }.each do |operation| %>
            def self.<%= operation.operation.name.split("::").last.underscore.gsub("_operation", "") %>(resource_or_path, &blk)
              require "<%= operation.path.split("google-ads-ruby/lib/").last %>"
              res = case resource_or_path
              when <%= operation.create_class.to_s %>
                resource_or_path
              # got a resource path
              when String
                obj = <%= operation.create_class.to_s %>.new
                obj.resource_name = resource_or_path
                obj
              else
                raise ArgumentError.new(
                  "Called #{__method__} with instance of wrong type:"\
                  " #{res.class} want #{operation.create_class.to_s}"\
                  " or String representing resource name"
                ) unless <%= operation.create_class.to_s %> === res
              end

              op = <%= operation.operation.name %>.new
              op["update_mask"] = Google::Ads::GoogleAds::FieldMaskUtil.with(res, &blk)
              op["update"] = res
              op
            end
            <% end %>
          end
        end
      end
    end
  end
end
